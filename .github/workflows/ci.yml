name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Create reports directory
      run: mkdir -p reports

    # Code Formatting Checks
    - name: Check code formatting with Black
      run: black --check --line-length=100 core services tools tools_solid server.py server_solid.py

    - name: Check import sorting with isort
      run: isort --check-only --profile=black core services tools tools_solid server.py server_solid.py

    # Linting
    - name: Lint with flake8
      run: |
        flake8 core services tools tools_solid server.py server_solid.py \
          --output-file=reports/flake8-report.txt --tee || true

    - name: Lint with pylint
      run: |
        pylint core services tools tools_solid server.py server_solid.py \
          --output-format=text --reports=yes > reports/pylint-report.txt || true

    # Type Checking
    - name: Type check with mypy
      run: |
        mypy core services tools tools_solid server.py server_solid.py \
          --html-report reports/mypy-html --txt-report reports/mypy-txt || true

    # Security Analysis
    - name: Security check with bandit
      run: |
        bandit -r core services tools tools_solid server.py server_solid.py \
          -f json -o reports/bandit-report.json || true
        bandit -r core services tools tools_solid server.py server_solid.py \
          -f txt -o reports/bandit-report.txt || true

    # Vulnerability Scanning
    - name: Check for vulnerabilities with safety
      run: |
        safety check --json --output reports/vulnerabilities.json || true
        safety check --output reports/vulnerabilities.txt || true

    # Testing with Coverage
    - name: Run tests with coverage
      run: |
        pytest --cov=core --cov=services --cov=tools --cov=tools_solid \
          --cov-report=html:reports/coverage-html \
          --cov-report=xml:reports/coverage.xml \
          --cov-report=term \
          --junitxml=reports/junit.xml || true

    # Additional Analysis
    - name: Code complexity analysis
      run: |
        radon cc core services tools tools_solid server.py server_solid.py \
          --show-complexity --min B --json > reports/complexity.json || true

    - name: Dead code detection
      run: |
        vulture core services tools tools_solid server.py server_solid.py \
          > reports/dead-code.txt || true

    - name: Docstring coverage
      run: |
        interrogate core services tools tools_solid server.py server_solid.py \
          > reports/docstring-coverage.txt || true

    # Upload artifacts
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: reports/

    # Generate quality summary
    - name: Generate quality summary
      if: matrix.python-version == '3.11'  # Only run once
      run: |
        echo "# Code Quality Summary" > reports/quality-summary.md
        echo "Generated on: $(date)" >> reports/quality-summary.md
        echo "" >> reports/quality-summary.md

        # Test coverage
        if [ -f reports/coverage.xml ]; then
          echo "## Test Coverage" >> reports/quality-summary.md
          grep -o 'line-rate="[^"]*"' reports/coverage.xml | head -1 >> reports/quality-summary.md || true
        fi

        # Security issues
        if [ -f reports/bandit-report.txt ]; then
          echo "## Security Analysis" >> reports/quality-summary.md
          echo "```" >> reports/quality-summary.md
          head -20 reports/bandit-report.txt >> reports/quality-summary.md || true
          echo "```" >> reports/quality-summary.md
        fi

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run quality checks for SonarQube
      run: |
        mkdir -p reports
        # Generate all reports for SonarQube
        pytest --cov=core --cov=services --cov=tools --cov=tools_solid \
          --cov-report=xml:reports/coverage.xml \
          --junitxml=reports/junit.xml || true
        pylint core services tools tools_solid server.py server_solid.py \
          --output-format=text --reports=yes > reports/pylint-report.txt || true
        bandit -r core services tools tools_solid server.py server_solid.py \
          -f json -o reports/bandit-report.json || true

    # - name: SonarQube Scan
    #   uses: sonarqube-quality-gate-action@master
    #   with:
    #     scanMetadataReportFile: reports/.scannerwork/report-task.txt
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   # Uncomment and configure when SonarQube/SonarCloud is set up

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run safety check
      run: safety check --json --output safety-report.json || true

    - name: Run pip-audit
      run: pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        # Add performance tests if available
        echo "Performance testing placeholder"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, dependency-check]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Quality Gate Check
      run: |
        echo "üö™ Quality Gate Assessment"
        echo "=========================="

        # Check if critical steps passed
        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "‚ùå Code quality checks failed"
          exit 1
        fi

        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ö†Ô∏è Security scan had issues (not blocking)"
        fi

        echo "‚úÖ Quality Gate Passed"