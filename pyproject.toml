[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "travel-planner-mcp"
version = "1.0.0"
description = "A comprehensive MCP server for travel planning with flight, hotel, car, and train search capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = ["mcp", "travel", "planning", "api", "server"]
requires-python = ">=3.8"
dependencies = [
    "mcp",
    "pydantic",
    "asyncio",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "mypy",
    "black",
    "isort",
    "flake8",
]
enhanced = [
    "requests",
    "python-dateutil",
]

[project.urls]
Homepage = "https://github.com/bvedpathak/travel-planner"
Repository = "https://github.com/bvedpathak/travel-planner.git"
Issues = "https://github.com/bvedpathak/travel-planner/issues"
Documentation = "https://github.com/bvedpathak/travel-planner#readme"

[project.scripts]
travel-planner = "server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["tools*", "resources*"]

[tool.setuptools.package-data]
"*" = ["*.json"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["tools", "server"]
omit = ["tests/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]