[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "travel-planner-mcp"
version = "1.0.0"
description = "A comprehensive MCP server for travel planning with flight, hotel, car, and train search capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = ["mcp", "travel", "planning", "api", "server"]
requires-python = ">=3.10"
dependencies = [
    "mcp",
    "pydantic",
    "asyncio",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "pylint>=2.15.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
    "vulture>=2.6.0",
    "radon>=5.1.0",
    "xenon>=0.9.0",
    "flake8-docstrings>=1.6.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=22.0.0",
    "flake8-comprehensions>=3.10.0",
    "flake8-simplify>=0.19.0",
    "pep8-naming>=0.13.0",
    "darglint>=1.8.0",
    "interrogate>=1.5.0",
]
enhanced = [
    "requests",
    "python-dateutil",
]

[project.urls]
Homepage = "https://github.com/bvedpathak/travel-planner"
Repository = "https://github.com/bvedpathak/travel-planner.git"
Issues = "https://github.com/bvedpathak/travel-planner/issues"
Documentation = "https://github.com/bvedpathak/travel-planner#readme"

[project.scripts]
travel-planner = "server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["tools*", "resources*"]

[tool.setuptools.package-data]
"*" = ["*.json"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["core", "services", "tools", "tools_solid", "server"]
omit = ["tests/*", "*/tests/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

# Pylint Configuration
[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 8
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "build"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (paramiko)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]

# Flake8 Configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
# See setup.cfg for flake8 configuration

# Vulture Configuration (Dead Code Detection)
[tool.vulture]
exclude = [".venv/", "build/", "dist/"]
ignore_decorators = ["@app.route", "@pytest.fixture", "@server.list_tools", "@server.call_tool"]
ignore_names = ["_*", "setUp", "tearDown"]
min_confidence = 60

# Interrogate Configuration (Docstring Coverage)
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
fail-under = 80
exclude = ["setup.py", "docs", "build", ".venv"]
verbose = 2

# MyPy Configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "aiohttp.*",
    "mcp.*",
    "pydantic.*",
]
ignore_missing_imports = true
